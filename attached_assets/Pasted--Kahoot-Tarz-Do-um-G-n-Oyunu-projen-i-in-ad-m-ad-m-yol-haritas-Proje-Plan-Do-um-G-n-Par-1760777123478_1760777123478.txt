"Kahoot Tarzı Doğum Günü Oyunu" projen için adım adım yol haritası:

### Proje Planı: Doğum Günü Parti Oyunu

#### 1\. Proje Özeti ve Ana Özellikler

Projenin amacı, bir arkadaşının doğum günü için birden fazla kişinin (\~8 kişi) aynı anda katılabileceği, interaktif bir "yakınlaştırılmış fotoğrafı tahmin etme" oyunu oluşturmaktır.

  * **Çift Ekran Deneyimi (Kahoot Tarzı):**
      * **Ana Ekran (Projektör/TV):** Duvara yansıtılacak olan ana oyun ekranıdır. Fotoğrafları, soruyu, şıkları, bağlanan oyuncuları, kalan süreyi ve tur sonu puan durumunu gösterir.
      * **Oyuncu Ekranı (Telefon):** Her oyuncunun kendi telefonundan bağlandığı, sadece cevap şıklarını (A, B, C, D gibi) içeren basit bir kumanda arayüzüdür.
  * **Çok Oyunculu ve Senkronize:** Oyun, tüm oyuncuların cevap vermesini bekler (veya süre dolduğunda) ve sonuçları tüm ekranlara (ana ekran ve oyuncu ekranları) aynı anda gönderir.
  * **Çoktan Seçmeli:** Tahminler yazarak değil, önceden belirlenmiş şıklar arasından seçilerek yapılır. Bu, oyunu hızlandırır ve komik çeldiriciler eklemene olanak tanır.
  * **Oyun Akışı:** Lobi (bekleme odası) -\> Oyun Başlangıcı -\> Tur 1 (Soru) -\> Cevapların Toplanması -\> Tur 1 (Sonuçlar) -\> Tur 2 (Soru)... -\> Final Puan Durumu.

-----

#### 2\. Teknik Gereksinimler ve Kullanılacak Teknolojiler

Bu proje, standart bir web sitesinden farklı olarak anlık iletişim gerektirir.

  * **Backend (Sunucu Tarafı - Beyin):**

      * **Dil:** **Python**
      * **Framework:** **Flask** (Sayfaları sunmak, URL'leri yönetmek için)
      * **Gerçek Zamanlı İletişim:** **Flask-SocketIO** (Projenin kalbi. Ana ekran ile tüm oyuncu telefonları arasındaki senkronizasyonu bu kütüphane sağlayacak.)
      * **Yayın Sunucusu:** **Gunicorn** (Flask uygulamasını Render'da yayına almak için standart ve güçlü bir sunucu.)
      * **WebSocket İşçisi:** **Gevent** (Gunicorn'un Flask-SocketIO ile uyumlu çalışabilmesi ve WebSocket bağlantılarını yönetebilmesi için **zorunlu** bir kütüphane.)

  * **Frontend (Kullanıcı Tarafı - Görünüm):**

      * **İskelet:** **HTML** (Ana ekran ve oyuncu ekranı için iki ayrı HTML dosyası.)
      * **Stil:** **CSS** (Oyunu güzel ve eğlenceli göstermek için.)
      * **Etkileşim:** **JavaScript**
          * **Socket.IO İstemci Kütüphanesi:** Tarayıcının sunucuyla (Flask-SocketIO) anlık bağlantı kurmasını sağlar.
          * **DOM Manipülasyonu:** Sunucudan gelen mesajlara göre (örn: "yeni tur başladı") ekrandaki fotoğrafı, puanı veya butonları dinamik olarak değiştirmek için kullanılır.

  * **Dağıtım (Hosting):**

      * **Kod Deposu:** **GitHub** (Kodlarını burada tutacak ve Render'a bağlayacaksın.)
      * **Platform:** **Render** (Ücretsiz planı WebSocket desteği sunduğu için bu proje için ideal.)

-----

#### 3\. Adım Adım Geliştirme Planı

Projeyi fazlara bölerek ilerlemek en sağlıklısı olacaktır:

**Faz 1: Proje Kurulumu ve Temel Sayfalar**

1.  Bilgisayarında proje klasörünü oluştur.
2.  Bir Python sanal ortamı (`venv`) kur ve aktive et.
3.  Gerekli tüm kütüphaneleri yükle: `pip install Flask Flask-SocketIO gunicorn gevent`
4.  Bir `app.py` dosyası oluştur. İçine iki rota (URL) tanımla:
      * `/host`: Ana ekran (projektör) için `host.html` dosyasını döndürsün.
      * `/play`: Oyuncu ekranı (telefon) için `play.html` dosyasını döndürsün.
5.  `templates` adında bir klasör oluştur ve içine `host.html` ile `play.html` adında iki boş HTML dosyası koy.

**Faz 2: WebSocket Bağlantısı ve "Lobi" Sistemi**

1.  `play.html`'e bir "İsim Gir" kutusu ve "Oyuna Katıl" butonu ekle.
2.  JavaScript (Socket.IO istemcisi) kullanarak, "Oyuna Katıl" butonuna basıldığında sunucuya oyuncunun adını gönder (`socket.emit('katilma_isteği', {isim: 'Ayşe'})`).
3.  `app.py` (Backend) tarafında bu isteği yakala (`@socketio.on('katilma_isteği')`).
4.  Sunucu, yeni katılan oyuncunun adını Ana Ekrana (`/host`) göndersin (`socket.emit('oyuncu_katildi', {isim: 'Ayşe'})`).
5.  `host.html`'deki JavaScript, bu mesajı dinlesin ve ekrandaki "Katılan Oyuncular" listesini güncellesin. (Tebrikler, lobin hazır\!)

**Faz 3: Oyun Döngüsü (Soru ve Cevap)**

1.  `host.html`'e bir "Oyunu Başlat" butonu koy.
2.  Bu butona basıldığında sunucuya "oyunu\_baslat" mesajı gönder.
3.  Sunucu, bu mesajı aldığında oyunu başlatır:
      * İlk soruyu (fotoğraf URL'si, şıklar) belirler.
      * Bu bilgiyi **hem** ana ekrana **hem de** tüm oyuncu ekranlarına aynı anda gönderir (`socket.emit('yeni_tur', {soru_bilgisi})`).
4.  `host.html` bu veriyi alıp ekrandaki fotoğrafı ve şıkları gösterir.
5.  `play.html` bu veriyi alıp A, B, C, D cevap butonlarını aktif hale getirir.
6.  Oyuncu, telefonundan bir şıkka bastığında, cevabı sunucuya gönderir (`socket.emit('cevap_ver', {secim: 'B'})`).
7.  Sunucu, her cevap aldığında ana ekrana "cevap veren sayısı arttı" mesajı gönderir. (`host.html` ekranı "3/8 cevapladı" yazar).

**Faz 4: Sonuçlar ve Puanlama**

1.  Sunucu, tüm oyunculardan cevap aldığında (veya süre dolduğunda):
      * Doğru cevabı belirler, puanları hesaplar.
      * **Tüm ekranlara** (host ve oyuncular) "tur\_sonuclari" mesajını gönderir.
2.  `host.html` bu mesajı alıp doğru cevabı gösterir, puan tablosunu günceller.
3.  `play.html` bu mesajı alıp oyuncuya "Doğru\!" veya "Yanlış\!" bilgisini gösterir.
4.  `host.html`'deki "Sıradaki Soru" butonuyla Faz 3'e geri dönülür.

-----

#### 4\. Dağıtım (Deployment) Planı - Render

Geliştirmeyi bitirdikten sonra siteni dünyaya açma zamanı:

1.  **Gereksinim Dosyası:** Projenin ana dizininde `requirements.txt` adında bir dosya oluştur. İçeriği tam olarak şu olmalı:
    ```
    Flask
    Flask-SocketIO
    gunicorn
    gevent
    ```
2.  **GitHub:** Tüm proje kodlarını (`app.py`, `requirements.txt`, `templates/`, `static/` klasörleri) bir GitHub deposuna yükle (`push`).
3.  **Render Hesabı:** Render.com'a git ve GitHub hesabınla giriş yap.
4.  **Yeni Web Servisi:**
      * Dashboard'da "New +" -\> "Web Service" seçeneğine tıkla.
      * GitHub deponu bul ve "Connect" de.
5.  **Ayar Ekranı (En Önemli Kısım):**
      * **Name:** Projene bir isim ver (örn: `dogumgunu-oyunu`). Sitenin adresi bu olacak.
      * **Region:** `Frankfurt (EU Central)` seç (Türkiye'ye en yakın).
      * **Build Command:** `pip install -r requirements.txt` (Render bunu otomatik olarak `requirements.txt`'yi gördüğü için doldurur).
      * **Start Command:** Buraya tam olarak şunu yaz:
        ```
        gunicorn -k gevent -w 1 app:socketio
        ```
        *(Bu komut, `app.py` dosyan içindeki `socketio` değişkenini `gevent` teknolojisiyle çalıştırmanı söyler. Projenin kalbidir.)*
      * **Plan:** "Free" planını seç.
6.  **Yarat:** "Create Web Service" butonuna bas. Render, kodunu GitHub'dan çekecek, kütüphaneleri yükleyecek ve siteni yayına alacak. "Logs" (Günlükler) ekranından süreci canlı takip edebilirsin.

Bu planla, fikrini somut adımlara dökmüş olduk. Şimdiden kolay gelsin, arkadaşın bu hediye karşısında çok etkilenecek\!